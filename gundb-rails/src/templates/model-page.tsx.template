"use client";

import { useState } from 'react';
import { useShogunGun } from '../../../components/shogun/ShogunGunProvider';
import { use${ModelName}s } from '../../../hooks/shogun/use${ModelName}';
import { ${ModelName} } from '../../../models/${ModelName}';

export default function ${ModelName}Page() {
  const { gun } = useShogunGun();
  const { ${modelNameLower}s, loading } = use${ModelName}s();
  const [formData, setFormData] = useState<Record<string, any>>({});
  
  // Set Gun instance for the model
  if (gun) {
    ${ModelName}.setGunInstance(gun);
  }
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const newItem = new ${ModelName}(formData);
      await newItem.save();
      setFormData({});
    } catch (error) {
      console.error('Error saving ${ModelName}:', error);
    }
  };
  
  if (loading) {
    return <div>Loading...</div>;
  }
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">${ModelName} List</h1>
      
      {/* Form */}
      <form onSubmit={handleSubmit} className="mb-8 p-4 bg-gray-100 rounded">
        <h2 className="text-xl mb-4">Add New ${ModelName}</h2>
        
        {/* Generate form fields dynamically based on model fields */}
        {Object.keys(${modelNameLower}s[0]?.attrs || {}).map(field => (
          field !== '_soul' && (
            <div key={field} className="mb-4">
              <label className="block mb-1">{field.charAt(0).toUpperCase() + field.slice(1)}</label>
              <input
                type="text"
                name={field}
                value={formData[field] || ''}
                onChange={handleChange}
                className="border p-2 w-full"
              />
            </div>
          )
        ))}
        
        <button 
          type="submit" 
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Save
        </button>
      </form>
      
      {/* List */}
      <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
        {${modelNameLower}s.map((item, index) => (
          <div key={index} className="border p-4 rounded">
            {Object.entries(item.attrs).map(([key, value]) => (
              key !== '_soul' && (
                <p key={key}>
                  <strong>{key.charAt(0).toUpperCase() + key.slice(1)}:</strong> {value}
                </p>
              )
            ))}
          </div>
        ))}
      </div>
    </div>
  );
} 